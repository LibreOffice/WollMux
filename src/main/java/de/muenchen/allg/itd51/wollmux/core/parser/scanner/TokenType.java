package de.muenchen.allg.itd51.wollmux.core.parser.scanner;

import java.util.regex.Pattern;

/**
 * Different types of tokens which can be generated by the scanner.
 * 
 * @author Daniel Sikeler
 */
public enum TokenType
{
  /** Token representing whitespace. */
  WHITESPACE("\\A[,;\\s]+"),
  /** Token representing a key. */
  KEY("\\A^[a-zA-Z_][a-zA-Z_0-9]*"),
  /** Token representing a value. */
  VALUE("\\A((\\\'(\\\'\\\'|[^\\\'])*\\\')|(\\\"(\\\"\\\"|[^\\\"])*\\\"))"),
  /** Token representing a open bracket. */
  OPENING_BRACKET("\\A\\("),
  /** Token representing a closing bracket. */
  CLOSING_BRACKET("\\A\\)"),
  /** Token representing a comment. */
  COMMENT("\\A#.*\\z"),
  /** Token representing the beginning of a new file. */
  NEW_FILE("\\A%include \\\".*\\\".*"),
  /** Token representing the end of a file. */
  END_FILE("");

  /**
   * A regular expression for this type, or null if there is no regular
   * expression.
   */
  private final Pattern regex;

  /**
   * Constructor for token types.
   * 
   * @param regex
   *          String-representation of the regular expression, or empty String
   *          if there doesn't exist a regular expression.
   */
  TokenType(final String regex)
  {
    if (regex.isEmpty())
    {
      this.regex = null;
    } else
    {
      this.regex = Pattern.compile(regex, Pattern.UNICODE_CASE);
    }
  }

  public Pattern getRegex()
  {
    return regex;
  }

  /**
   * Is there a regular expression for this token type.
   * 
   * @return true if an regular expression exist, false otherwise.
   */
  public boolean hasRegex()
  {
    return regex != null;
  }
}
